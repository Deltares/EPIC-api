{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"E.P.I.C. \u00b6 About this project (EPIC-Api) \u00b6 This project is built from the Django rest framework , based in Django , to provide a web API that can interact with different frontends. Our current approach connects a Vue.js frontend with this API. The following guides might be helpful to understand the whole set up and coupling process between both tools (kudos to Bennett Garner for these extremely helpful resources): - vue+django guide - django restapi guide At the moment we use a PostgreSQL database to store and manage all the information in a CentOs 7 machine for testing this prototype. Purpose \u00b6 Our goal is to provide organizations with a multi-step questionaire based on their strategic interests which will quickly assess their current situation. Reporting \u00b6 At the moment reporting is only possible as a .pdf which is generated by advisors , a specific user rol in this tool. Contributing \u00b6 If you wish to contribute to this project we encourage you to have a look at our contribute guide or in the official contributing documentation page","title":"E.P.I.C."},{"location":"#epic","text":"","title":"E.P.I.C."},{"location":"#about-this-project-epic-api","text":"This project is built from the Django rest framework , based in Django , to provide a web API that can interact with different frontends. Our current approach connects a Vue.js frontend with this API. The following guides might be helpful to understand the whole set up and coupling process between both tools (kudos to Bennett Garner for these extremely helpful resources): - vue+django guide - django restapi guide At the moment we use a PostgreSQL database to store and manage all the information in a CentOs 7 machine for testing this prototype.","title":"About this project (EPIC-Api)"},{"location":"#purpose","text":"Our goal is to provide organizations with a multi-step questionaire based on their strategic interests which will quickly assess their current situation.","title":"Purpose"},{"location":"#reporting","text":"At the moment reporting is only possible as a .pdf which is generated by advisors , a specific user rol in this tool.","title":"Reporting"},{"location":"#contributing","text":"If you wish to contribute to this project we encourage you to have a look at our contribute guide or in the official contributing documentation page","title":"Contributing"},{"location":"changelog/","text":"v1.1.0 (2022-07-01) \u00b6 Feat \u00b6 Replace yes/no with agreement options. Refactor code to replace yes/no question-answer to a 'agreement' range of answers v1.0.0 (2022-06-24) \u00b6 Feat \u00b6 postgresql replaces the previous sqlite database v0.28.0 (2022-06-21) \u00b6 Feat \u00b6 downloadable reports (#75) epic_answers.py : We now list a summary of selected programs views.py;serializers/report_serializer.py;models/epic_answers.py : It is now possible to get a detailed summary of each question based on their (sub)type serializers/progress_serializer.py;views.py;urls.py : Added end point from /api/program/id/progress to retrieve the progress for the current logged in epic user, added serializer and adapted tests epic_app/serializers/answer_serializer.py;epic_app/views.py : We can now patch selected programs, adapted tests epic_app/views.py : Edited partial_update to allow admin to change values views.py : We now assign a valid serializer when creating answers from the endpoint /api/answer/ views.py : Streamlined get-list get-detail (get / retrieve) for answers. Adapted tests views.py : API Client can now retrieve a serialized answer for a question without knowing either type views.py : Added endpoint for flat questions generate_entity_admin.py : Allow display of users in an organization epic_app/admin_models/generate_entity_admin.py : We can now generate epic users from the organization page views.py;epic_user_serializer.py : Added logic to update user's password epic_app/serializers/epic_user_serializer.py : Added serializer for EpicOrganization. Adapted and extended related tests epic_app/models/epic_user.py : Added organization as a model. Adapted setup and tests epic_app/admin.py;epic_app/models.py;epic_app/templates/ : Added simple logic to enable future CSV importing of Areas, added templates epic_app/models.py;epic_app/serializers.py;epic_app/views.py : Added logic to serialize all data with their nested relationships epic_app/models.py : Extended logic so that clusters can be made epic_app/admin.py : Added relationships between area-group-program-question settings.py : Added middleware CORS to allow ui / backend communication with the /api/ url epic_app/serializers.py : Fixed posting answers through the browser regardless of the logged in user epic_app/serializers.py : Now the users api browser will not display the password which will be validated and required on post epic_app/ : Changed serializers and views to require authentication for get / post data epic_app/models.py : Replaced cross-reference tables with single Answer and two foreign keys; adapted views and serializers epic_core/urls.py : Stable urls just for epicuser table epic_app/urls.py : Added routing for the epic_app rest calls epic_app/views.py : Added ViewSet for all the existing serialized models serializers.py : Added JSON serializers migrations/models.py : Created basic models and cross-reference tables to be modified in the admin page poetry : Added poetry as package handler Small markdown fix Small markdown fix Small markdown fix Fix \u00b6 epic_app/importers/xlsx/ : improved import by delegating validation to each method for better error handling epic_app : Removed outdated reference to previous serializers / views epic_app/admin.py : Minor syntax fix epic_app/serializers.py : Fixed usage of wrong fields in the serializers epic_app/serializers.py : corrected typo Refactor \u00b6 views.py;urls.py : Removed previous 'questions' viewsets as the 'QuestionViewSet' replaces the whole set. epic_app/admin_models : Moved admin models to different module for better maintenance of the django tree. v0.27.1 (2022-06-13) \u00b6 v0.27.0 (2022-06-01) \u00b6 Feat \u00b6 report_pdf.py : Fixed layout v0.26.0 (2022-06-01) \u00b6 Feat \u00b6 report_pdf.py : Now the linkages report contains names instead of id's report_pdf.py : Improved report layout report_pdf.py : Improved report layout v0.25.0 (2022-05-31) \u00b6 Feat \u00b6 downloadable reports (#75) v0.24.0 (2022-05-25) \u00b6 Feat \u00b6 epic_app/tests/test_rest_framework_url.py : Enabled retrieve call for a pdf report; adapted test commands/ : Added commands to generate dummy users and do a simple import of all the domain xlsx files v0.23.0 (2022-05-23) \u00b6 Fix \u00b6 deploy.sh : Corrected typo Feat \u00b6 epic_setup.py : Now we can generate a 'clean' start without dummy users v0.22.0 (2022-05-17) \u00b6 Feat \u00b6 xlsx/domain_importer.py;models.py;program_serializer.py : Added new fields for Program v0.21.1 (2022-05-13) \u00b6 Fix \u00b6 epic_app/importers/xlsx/ : improved import by delegating validation to each method for better error handling v0.21.0 (2022-05-11) \u00b6 Feat \u00b6 epic_app/models/epic_user.py : Added is_advisor property for EpicUsers, adapted related code v0.20.0 (2022-05-10) \u00b6 Feat \u00b6 epic_answers.py : We now list a summary of selected programs views.py;serializers/report_serializer.py;models/epic_answers.py : It is now possible to get a detailed summary of each question based on their (sub)type v0.19.0 (2022-05-06) \u00b6 Feat \u00b6 serializers/progress_serializer.py;views.py;urls.py : Added end point from /api/program/id/progress to retrieve the progress for the current logged in epic user, added serializer and adapted tests v0.18.0 (2022-05-04) \u00b6 Feat \u00b6 epic_app/serializers/answer_serializer.py;epic_app/views.py : We can now patch selected programs, adapted tests epic_app/views.py : Edited partial_update to allow admin to change values views.py : We now assign a valid serializer when creating answers from the endpoint /api/answer/ views.py : Streamlined get-list get-detail (get / retrieve) for answers. Adapted tests views.py : API Client can now retrieve a serialized answer for a question without knowing either type views.py : Added endpoint for flat questions Refactor \u00b6 views.py;urls.py : Removed previous 'questions' viewsets as the 'QuestionViewSet' replaces the whole set. v0.17.0 (2022-05-03) \u00b6 Feat \u00b6 generate_entity_admin.py : Allow display of users in an organization epic_app/admin_models/generate_entity_admin.py : We can now generate epic users from the organization page views.py;epic_user_serializer.py : Added logic to update user's password epic_app/serializers/epic_user_serializer.py : Added serializer for EpicOrganization. Adapted and extended related tests epic_app/models/epic_user.py : Added organization as a model. Adapted setup and tests Refactor \u00b6 epic_app/admin_models : Moved admin models to different module for better maintenance of the django tree. v0.16.0 (2022-04-29) \u00b6 Feat \u00b6 epic_app/importers/xlsx_question_importer.py : Fixed question importer to include the group as a filtering condition epic_app/importers : We now import xlsx files instead of csv to make it more straightforward for end users Refactor \u00b6 importers/xlsx : Moved xlsx importers to its own module for better maintainance. v0.15.0 (2022-04-20) \u00b6 Fix \u00b6 epic_answers.py : fixed integrity check for base question after end-to-end testing. Feat \u00b6 epic_answers.py;epic_questions.py : Added constraints to answers so only specified question types can be added v0.14.0 (2022-04-19) \u00b6 Feat \u00b6 epic_app/models/epic_questions.py : Added Key Agency Actions table answer_serializer.py : Fixed posting answers epic_app/views.py : Changed views for answers so it's possible to post as an user or an admin Fix \u00b6 epic_questions.py : Fixed meta inheritance on questions to allow unique relationships Refactor \u00b6 answer_serializer.py : Removed serializer for raw answer as it is not necessary anymore epic_answers : Split answers from questions v0.13.0 (2022-04-15) \u00b6 Feat \u00b6 epic_app/admin.py : Added admin action to generate all linkages from available programs epic_app/admin.py : Added admin views to import national framework and evolution questions question_csv_importer.py : Added csv importers for NationalFrameworkQuestion and EvolutionQuestion Refactor \u00b6 importers : Extracted each importer in a separate file for better consistency importers : Moved importers into a separate directory to allow better maintainance v0.12.1 (2022-04-15) \u00b6 Refactor \u00b6 views.py : Improved EpicUserViewSet class definition; Extended related GET - detail test. v0.12.0 (2022-04-15) \u00b6 Feat \u00b6 epic_app/views.py;question_serializer.py : We now expose a get to get (all/detail) a question category for a given program epic_app/urls.py;epic_app/serializers/question_serializer.py : We now expose each question category individually epic_app/serializers/epic_user_serializer.py : Now we expose the list of selected programs for a given user epic_app/models/epic_user.py : Extended user definition to include list of selected programs v0.11.0 (2022-04-11) \u00b6 Feat \u00b6 epic_app/serializers/answer_serializer.py : Extended answer serializer definition to match question types epic_app/models/epic_questions.py : Now questions return a new (or existing) answer for the requested user. Added tests epic_app/models/epic_questions.py : Added answer types v0.10.0 (2022-04-08) \u00b6 Feat \u00b6 epic_app/serializers/question_serializer.py : Improved serializer so we have information of its subtypes directly epic_app/models/epic_questions.py : Added one-to-one constraint for linkages question by overriding the default save method epic_app/models/epic_questions.py : Added class for questions and created one model class per type from the mockups Refactor \u00b6 epic_app/serializers : Moved serializers into different directory to better maintain them epic_app/models : Moved models into separate directory for better maintainability v0.9.0 (2022-04-06) \u00b6 Feat \u00b6 epic_app/importers.py : Now we properly import the descriptions v0.8.0 (2022-04-06) \u00b6 Feat \u00b6 epic_app/serializers.py : Exposed description for programs v0.7.1 (2022-04-06) \u00b6 Fix \u00b6 epic_app/serializers.py : Fixed agency attribute for program serializer v0.7.0 (2022-04-06) \u00b6 Refactor \u00b6 epic_app/importers.py : modified agency null (should be blank) attribute, refactored importer code to reduce duplicity Feat \u00b6 epic_app/importers.py;epic_app/models.py : Added import csv functionality epic_app/admin.py : Added agency admin to import csv, adjusted tests epic_app/models.py : Updated program to include description and a unique name case-insensitive attribute epic_app/models.py;epic_app/serializers.py : Added Agency as a model and serializer, a cluster of programs v0.6.0 (2022-04-05) \u00b6 Refactor \u00b6 epic_app/importers.py : Extracted import logic for better maintainabilit Feat \u00b6 epic_app/admin.py : Added basic import functionality urls.py : Added redirection for the admin page epic_app/urls.py : We now directly redirect the default path to /api v0.5.0 (2022-03-23) \u00b6 Feat \u00b6 epic_app/admin.py;epic_app/models.py;epic_app/templates/ : Added simple logic to enable future CSV importing of Areas, added templates v0.4.0 (2022-03-23) \u00b6 Feat \u00b6 epic_app/models.py;epic_app/serializers.py;epic_app/views.py : Added logic to serialize all data with their nested relationships epic_app/models.py : Extended logic so that clusters can be made epic_app/admin.py : Added relationships between area-group-program-question v0.3.0 (2022-03-23) \u00b6 Feat \u00b6 settings.py : Added middleware CORS to allow ui / backend communication with the /api/ url v0.2.0 (2022-03-22) \u00b6 Feat \u00b6 epic_app/serializers.py : Fixed posting answers through the browser regardless of the logged in user epic_app/serializers.py : Now the users api browser will not display the password which will be validated and required on post epic_app/ : Changed serializers and views to require authentication for get / post data epic_app/models.py : Replaced cross-reference tables with single Answer and two foreign keys; adapted views and serializers Fix \u00b6 epic_app : Removed outdated reference to previous serializers / views epic_app/admin.py : Minor syntax fix v0.1.0 (2022-03-21) \u00b6 Fix \u00b6 epic_app/serializers.py : Fixed usage of wrong fields in the serializers epic_app/serializers.py : corrected typo Feat \u00b6 epic_core/urls.py : Stable urls just for epicuser table epic_app/urls.py : Added routing for the epic_app rest calls epic_app/views.py : Added ViewSet for all the existing serialized models serializers.py : Added JSON serializers migrations/models.py : Created basic models and cross-reference tables to be modified in the admin page poetry : Added poetry as package handler Small markdown fix Small markdown fix Small markdown fix","title":"Changelog"},{"location":"changelog/#v110-2022-07-01","text":"","title":"v1.1.0 (2022-07-01)"},{"location":"changelog/#feat","text":"Replace yes/no with agreement options. Refactor code to replace yes/no question-answer to a 'agreement' range of answers","title":"Feat"},{"location":"changelog/#v100-2022-06-24","text":"","title":"v1.0.0 (2022-06-24)"},{"location":"changelog/#feat_1","text":"postgresql replaces the previous sqlite database","title":"Feat"},{"location":"changelog/#v0280-2022-06-21","text":"","title":"v0.28.0 (2022-06-21)"},{"location":"changelog/#feat_2","text":"downloadable reports (#75) epic_answers.py : We now list a summary of selected programs views.py;serializers/report_serializer.py;models/epic_answers.py : It is now possible to get a detailed summary of each question based on their (sub)type serializers/progress_serializer.py;views.py;urls.py : Added end point from /api/program/id/progress to retrieve the progress for the current logged in epic user, added serializer and adapted tests epic_app/serializers/answer_serializer.py;epic_app/views.py : We can now patch selected programs, adapted tests epic_app/views.py : Edited partial_update to allow admin to change values views.py : We now assign a valid serializer when creating answers from the endpoint /api/answer/ views.py : Streamlined get-list get-detail (get / retrieve) for answers. Adapted tests views.py : API Client can now retrieve a serialized answer for a question without knowing either type views.py : Added endpoint for flat questions generate_entity_admin.py : Allow display of users in an organization epic_app/admin_models/generate_entity_admin.py : We can now generate epic users from the organization page views.py;epic_user_serializer.py : Added logic to update user's password epic_app/serializers/epic_user_serializer.py : Added serializer for EpicOrganization. Adapted and extended related tests epic_app/models/epic_user.py : Added organization as a model. Adapted setup and tests epic_app/admin.py;epic_app/models.py;epic_app/templates/ : Added simple logic to enable future CSV importing of Areas, added templates epic_app/models.py;epic_app/serializers.py;epic_app/views.py : Added logic to serialize all data with their nested relationships epic_app/models.py : Extended logic so that clusters can be made epic_app/admin.py : Added relationships between area-group-program-question settings.py : Added middleware CORS to allow ui / backend communication with the /api/ url epic_app/serializers.py : Fixed posting answers through the browser regardless of the logged in user epic_app/serializers.py : Now the users api browser will not display the password which will be validated and required on post epic_app/ : Changed serializers and views to require authentication for get / post data epic_app/models.py : Replaced cross-reference tables with single Answer and two foreign keys; adapted views and serializers epic_core/urls.py : Stable urls just for epicuser table epic_app/urls.py : Added routing for the epic_app rest calls epic_app/views.py : Added ViewSet for all the existing serialized models serializers.py : Added JSON serializers migrations/models.py : Created basic models and cross-reference tables to be modified in the admin page poetry : Added poetry as package handler Small markdown fix Small markdown fix Small markdown fix","title":"Feat"},{"location":"changelog/#fix","text":"epic_app/importers/xlsx/ : improved import by delegating validation to each method for better error handling epic_app : Removed outdated reference to previous serializers / views epic_app/admin.py : Minor syntax fix epic_app/serializers.py : Fixed usage of wrong fields in the serializers epic_app/serializers.py : corrected typo","title":"Fix"},{"location":"changelog/#refactor","text":"views.py;urls.py : Removed previous 'questions' viewsets as the 'QuestionViewSet' replaces the whole set. epic_app/admin_models : Moved admin models to different module for better maintenance of the django tree.","title":"Refactor"},{"location":"changelog/#v0271-2022-06-13","text":"","title":"v0.27.1 (2022-06-13)"},{"location":"changelog/#v0270-2022-06-01","text":"","title":"v0.27.0 (2022-06-01)"},{"location":"changelog/#feat_3","text":"report_pdf.py : Fixed layout","title":"Feat"},{"location":"changelog/#v0260-2022-06-01","text":"","title":"v0.26.0 (2022-06-01)"},{"location":"changelog/#feat_4","text":"report_pdf.py : Now the linkages report contains names instead of id's report_pdf.py : Improved report layout report_pdf.py : Improved report layout","title":"Feat"},{"location":"changelog/#v0250-2022-05-31","text":"","title":"v0.25.0 (2022-05-31)"},{"location":"changelog/#feat_5","text":"downloadable reports (#75)","title":"Feat"},{"location":"changelog/#v0240-2022-05-25","text":"","title":"v0.24.0 (2022-05-25)"},{"location":"changelog/#feat_6","text":"epic_app/tests/test_rest_framework_url.py : Enabled retrieve call for a pdf report; adapted test commands/ : Added commands to generate dummy users and do a simple import of all the domain xlsx files","title":"Feat"},{"location":"changelog/#v0230-2022-05-23","text":"","title":"v0.23.0 (2022-05-23)"},{"location":"changelog/#fix_1","text":"deploy.sh : Corrected typo","title":"Fix"},{"location":"changelog/#feat_7","text":"epic_setup.py : Now we can generate a 'clean' start without dummy users","title":"Feat"},{"location":"changelog/#v0220-2022-05-17","text":"","title":"v0.22.0 (2022-05-17)"},{"location":"changelog/#feat_8","text":"xlsx/domain_importer.py;models.py;program_serializer.py : Added new fields for Program","title":"Feat"},{"location":"changelog/#v0211-2022-05-13","text":"","title":"v0.21.1 (2022-05-13)"},{"location":"changelog/#fix_2","text":"epic_app/importers/xlsx/ : improved import by delegating validation to each method for better error handling","title":"Fix"},{"location":"changelog/#v0210-2022-05-11","text":"","title":"v0.21.0 (2022-05-11)"},{"location":"changelog/#feat_9","text":"epic_app/models/epic_user.py : Added is_advisor property for EpicUsers, adapted related code","title":"Feat"},{"location":"changelog/#v0200-2022-05-10","text":"","title":"v0.20.0 (2022-05-10)"},{"location":"changelog/#feat_10","text":"epic_answers.py : We now list a summary of selected programs views.py;serializers/report_serializer.py;models/epic_answers.py : It is now possible to get a detailed summary of each question based on their (sub)type","title":"Feat"},{"location":"changelog/#v0190-2022-05-06","text":"","title":"v0.19.0 (2022-05-06)"},{"location":"changelog/#feat_11","text":"serializers/progress_serializer.py;views.py;urls.py : Added end point from /api/program/id/progress to retrieve the progress for the current logged in epic user, added serializer and adapted tests","title":"Feat"},{"location":"changelog/#v0180-2022-05-04","text":"","title":"v0.18.0 (2022-05-04)"},{"location":"changelog/#feat_12","text":"epic_app/serializers/answer_serializer.py;epic_app/views.py : We can now patch selected programs, adapted tests epic_app/views.py : Edited partial_update to allow admin to change values views.py : We now assign a valid serializer when creating answers from the endpoint /api/answer/ views.py : Streamlined get-list get-detail (get / retrieve) for answers. Adapted tests views.py : API Client can now retrieve a serialized answer for a question without knowing either type views.py : Added endpoint for flat questions","title":"Feat"},{"location":"changelog/#refactor_1","text":"views.py;urls.py : Removed previous 'questions' viewsets as the 'QuestionViewSet' replaces the whole set.","title":"Refactor"},{"location":"changelog/#v0170-2022-05-03","text":"","title":"v0.17.0 (2022-05-03)"},{"location":"changelog/#feat_13","text":"generate_entity_admin.py : Allow display of users in an organization epic_app/admin_models/generate_entity_admin.py : We can now generate epic users from the organization page views.py;epic_user_serializer.py : Added logic to update user's password epic_app/serializers/epic_user_serializer.py : Added serializer for EpicOrganization. Adapted and extended related tests epic_app/models/epic_user.py : Added organization as a model. Adapted setup and tests","title":"Feat"},{"location":"changelog/#refactor_2","text":"epic_app/admin_models : Moved admin models to different module for better maintenance of the django tree.","title":"Refactor"},{"location":"changelog/#v0160-2022-04-29","text":"","title":"v0.16.0 (2022-04-29)"},{"location":"changelog/#feat_14","text":"epic_app/importers/xlsx_question_importer.py : Fixed question importer to include the group as a filtering condition epic_app/importers : We now import xlsx files instead of csv to make it more straightforward for end users","title":"Feat"},{"location":"changelog/#refactor_3","text":"importers/xlsx : Moved xlsx importers to its own module for better maintainance.","title":"Refactor"},{"location":"changelog/#v0150-2022-04-20","text":"","title":"v0.15.0 (2022-04-20)"},{"location":"changelog/#fix_3","text":"epic_answers.py : fixed integrity check for base question after end-to-end testing.","title":"Fix"},{"location":"changelog/#feat_15","text":"epic_answers.py;epic_questions.py : Added constraints to answers so only specified question types can be added","title":"Feat"},{"location":"changelog/#v0140-2022-04-19","text":"","title":"v0.14.0 (2022-04-19)"},{"location":"changelog/#feat_16","text":"epic_app/models/epic_questions.py : Added Key Agency Actions table answer_serializer.py : Fixed posting answers epic_app/views.py : Changed views for answers so it's possible to post as an user or an admin","title":"Feat"},{"location":"changelog/#fix_4","text":"epic_questions.py : Fixed meta inheritance on questions to allow unique relationships","title":"Fix"},{"location":"changelog/#refactor_4","text":"answer_serializer.py : Removed serializer for raw answer as it is not necessary anymore epic_answers : Split answers from questions","title":"Refactor"},{"location":"changelog/#v0130-2022-04-15","text":"","title":"v0.13.0 (2022-04-15)"},{"location":"changelog/#feat_17","text":"epic_app/admin.py : Added admin action to generate all linkages from available programs epic_app/admin.py : Added admin views to import national framework and evolution questions question_csv_importer.py : Added csv importers for NationalFrameworkQuestion and EvolutionQuestion","title":"Feat"},{"location":"changelog/#refactor_5","text":"importers : Extracted each importer in a separate file for better consistency importers : Moved importers into a separate directory to allow better maintainance","title":"Refactor"},{"location":"changelog/#v0121-2022-04-15","text":"","title":"v0.12.1 (2022-04-15)"},{"location":"changelog/#refactor_6","text":"views.py : Improved EpicUserViewSet class definition; Extended related GET - detail test.","title":"Refactor"},{"location":"changelog/#v0120-2022-04-15","text":"","title":"v0.12.0 (2022-04-15)"},{"location":"changelog/#feat_18","text":"epic_app/views.py;question_serializer.py : We now expose a get to get (all/detail) a question category for a given program epic_app/urls.py;epic_app/serializers/question_serializer.py : We now expose each question category individually epic_app/serializers/epic_user_serializer.py : Now we expose the list of selected programs for a given user epic_app/models/epic_user.py : Extended user definition to include list of selected programs","title":"Feat"},{"location":"changelog/#v0110-2022-04-11","text":"","title":"v0.11.0 (2022-04-11)"},{"location":"changelog/#feat_19","text":"epic_app/serializers/answer_serializer.py : Extended answer serializer definition to match question types epic_app/models/epic_questions.py : Now questions return a new (or existing) answer for the requested user. Added tests epic_app/models/epic_questions.py : Added answer types","title":"Feat"},{"location":"changelog/#v0100-2022-04-08","text":"","title":"v0.10.0 (2022-04-08)"},{"location":"changelog/#feat_20","text":"epic_app/serializers/question_serializer.py : Improved serializer so we have information of its subtypes directly epic_app/models/epic_questions.py : Added one-to-one constraint for linkages question by overriding the default save method epic_app/models/epic_questions.py : Added class for questions and created one model class per type from the mockups","title":"Feat"},{"location":"changelog/#refactor_7","text":"epic_app/serializers : Moved serializers into different directory to better maintain them epic_app/models : Moved models into separate directory for better maintainability","title":"Refactor"},{"location":"changelog/#v090-2022-04-06","text":"","title":"v0.9.0 (2022-04-06)"},{"location":"changelog/#feat_21","text":"epic_app/importers.py : Now we properly import the descriptions","title":"Feat"},{"location":"changelog/#v080-2022-04-06","text":"","title":"v0.8.0 (2022-04-06)"},{"location":"changelog/#feat_22","text":"epic_app/serializers.py : Exposed description for programs","title":"Feat"},{"location":"changelog/#v071-2022-04-06","text":"","title":"v0.7.1 (2022-04-06)"},{"location":"changelog/#fix_5","text":"epic_app/serializers.py : Fixed agency attribute for program serializer","title":"Fix"},{"location":"changelog/#v070-2022-04-06","text":"","title":"v0.7.0 (2022-04-06)"},{"location":"changelog/#refactor_8","text":"epic_app/importers.py : modified agency null (should be blank) attribute, refactored importer code to reduce duplicity","title":"Refactor"},{"location":"changelog/#feat_23","text":"epic_app/importers.py;epic_app/models.py : Added import csv functionality epic_app/admin.py : Added agency admin to import csv, adjusted tests epic_app/models.py : Updated program to include description and a unique name case-insensitive attribute epic_app/models.py;epic_app/serializers.py : Added Agency as a model and serializer, a cluster of programs","title":"Feat"},{"location":"changelog/#v060-2022-04-05","text":"","title":"v0.6.0 (2022-04-05)"},{"location":"changelog/#refactor_9","text":"epic_app/importers.py : Extracted import logic for better maintainabilit","title":"Refactor"},{"location":"changelog/#feat_24","text":"epic_app/admin.py : Added basic import functionality urls.py : Added redirection for the admin page epic_app/urls.py : We now directly redirect the default path to /api","title":"Feat"},{"location":"changelog/#v050-2022-03-23","text":"","title":"v0.5.0 (2022-03-23)"},{"location":"changelog/#feat_25","text":"epic_app/admin.py;epic_app/models.py;epic_app/templates/ : Added simple logic to enable future CSV importing of Areas, added templates","title":"Feat"},{"location":"changelog/#v040-2022-03-23","text":"","title":"v0.4.0 (2022-03-23)"},{"location":"changelog/#feat_26","text":"epic_app/models.py;epic_app/serializers.py;epic_app/views.py : Added logic to serialize all data with their nested relationships epic_app/models.py : Extended logic so that clusters can be made epic_app/admin.py : Added relationships between area-group-program-question","title":"Feat"},{"location":"changelog/#v030-2022-03-23","text":"","title":"v0.3.0 (2022-03-23)"},{"location":"changelog/#feat_27","text":"settings.py : Added middleware CORS to allow ui / backend communication with the /api/ url","title":"Feat"},{"location":"changelog/#v020-2022-03-22","text":"","title":"v0.2.0 (2022-03-22)"},{"location":"changelog/#feat_28","text":"epic_app/serializers.py : Fixed posting answers through the browser regardless of the logged in user epic_app/serializers.py : Now the users api browser will not display the password which will be validated and required on post epic_app/ : Changed serializers and views to require authentication for get / post data epic_app/models.py : Replaced cross-reference tables with single Answer and two foreign keys; adapted views and serializers","title":"Feat"},{"location":"changelog/#fix_6","text":"epic_app : Removed outdated reference to previous serializers / views epic_app/admin.py : Minor syntax fix","title":"Fix"},{"location":"changelog/#v010-2022-03-21","text":"","title":"v0.1.0 (2022-03-21)"},{"location":"changelog/#fix_7","text":"epic_app/serializers.py : Fixed usage of wrong fields in the serializers epic_app/serializers.py : corrected typo","title":"Fix"},{"location":"changelog/#feat_29","text":"epic_core/urls.py : Stable urls just for epicuser table epic_app/urls.py : Added routing for the epic_app rest calls epic_app/views.py : Added ViewSet for all the existing serialized models serializers.py : Added JSON serializers migrations/models.py : Created basic models and cross-reference tables to be modified in the admin page poetry : Added poetry as package handler Small markdown fix Small markdown fix Small markdown fix","title":"Feat"},{"location":"guides/api_deployment/","text":"Deployment of EPIC-api \u00b6 To deploy the backend in an open environment we recommend following Django guidelines by using gunicorn and NGINX . The following requirements should be met from EPIC-api v.1.*: UNIX system. NGINX . Already installed and configured. PostgreSQL . At least version 10, we will install 11. Python 3 . At least version 3.8 Are you deploying on a CentOs machine? You can follow the CentOs installation steps for Python in the appendix section . Checking requirements \u00b6 It could be possible that your UNIX system does not have the latest Python and/or PostgreSQL versions. Please ensure you have installed Python (at least) 3.8 and PostgreSQL 11. postgres --version python3 --version Sometimes they are not found through your bash as they might not be parth of the $PATH. To do so, run the following command. export LD_LIBRARY_PATH = \"/usr/local/lib/\" PATH = $PATH :/usr/local/bin export PATH = $PATH :/usr/pgsql-11/bin: $PATH alias python3 = \"/usr/local/bin/python3.9\" Setting up PostgreSQL \u00b6 Assuming you have already installed PostgreSQL, you will need to create a database, user and password to connect the epic_api to. We have described these steps already at the Installing PostgreSQL . After those steps are complete, we need to specify our values for the NAME , USER and PASSWORD with the ones assigned during the postgresql. Let's have a look at epic_core/settings.py which is read by Django to stablish the PostgreSQL database connection. cat /var/www/epic_core/settings.py DATABASES = { \"default\": { \"ENGINE\": \"django.db.backends.postgresql_psycopg2\", \"OPTIONS\": { \"service\": \"epic_svc\", }, } } As can be seen, Django expects a defined service named epic_svc . It will be specified as follows in an ini-file named .pg_service.conf which will be located at our own convenience in the project directory and lated exported as an environment variable . ```cli bash cd /var/www/epic-api vi .pg_service.conf > __IMPORTANT!__ We encountered problems with the .conf file encoding. Please ensure the file is saved with `UTF-8` encoding. > This file has a ini structure as defined in the [official documentation](https://www.postgresql.org/docs/current/libpq-pgservice.html) ```ini [epic_svc] host=localhost user=postgres password=postgres dbname=epic_db port=5432 And we export its location: export PGSERVICEFILE = /var/www/EPIC-api/.pg_service.conf We should now be able to stablish a connection between the Django and the PostgreSQL server. This step can be verified after installing Django by running the command poetry run python manage.py check --database default Alternative \u00b6 You may also create the .pg_service.conf at the expected 'global' location: pg_config --sysconfdir > /etc/somepath/to/pgsql vi /etc/somepath/to/pgsql/.pg_service.conf Installing Django \u00b6 Checkout the root directory of the EPIC-api repository somewhere recognizable. Such as /var/www/epicapi-site/ . Navigate with the commandline to the previous checkout directory. Define debug and secret key values: Create a secret key through Python CLI python >> import secrets >> from pathlib import Path >> Path ( '.django_secrets' ) .write_text ( secrets.token_hex ( 16 )) > A new file is now generated containing your unique token key expected by /epic_core/settings.py. In case this key is not valid please contact carles.sorianoperez@deltares.nl to provide a valid one. Define a debug value: For development: python >> from pathlib import Path >> Path ( '.django_debug' ) .write_text ( \"True\" ) For production: python >> from pathlib import Path >> Path ( '.django_debug' ) .write_text ( \"False\" ) Install now the current Django package. poetry install poetry run python3 manage.py collectstatic --noinput Alternative with latest pip versions: pip install -e . python3 manage.py collectstatic --noinput > It will install the .toml package in edit mode. Run our custom command ONLY WITH A FRESH FIRST CHECKOUT to create the database and add an admin user: For development: poetry python manage.py epic_setup --test > This will import all initial data and generate a test admin user (admin-admin) and several test 'EpicUsers'. For production: poetry python manage.py epic_setup > This will import all initial data but WILL NOT generate a default admin user, you will have to create it yourself. poetry run python manage.py createsuperuser If desired you can change the password after creating the user by running: poetry run python manage.py changepassword <admin username> The tool is now ready to run. In our case we will do it with Gunicorn on the next section. Gunicorn run: \u00b6 If we have not executed the custom script, then we need to run on a separate process gunicorn, we only need to execute the following command line as a background activity: poetry run gunicorn epic_core.wsgi > An output in the command line will show you where the (local) server is deployed. By default you should be able to check its functioning here: http://127.0.0.1:8000/ NGINX configuration: \u00b6 Although we are already 'serving' our Django applicaiton, this does not mean that it is accessible outside our local machine. Most likely you will require to do a redirection of the requests to the backend. For that it's necessary adding the following lines into your 'nginx' .conf file: server { ... location ^~ /api/ { proxy_pass http://127.0.0.1:8000/api/; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; } location ^~ /admin/ { proxy_pass http://127.0.0.1:8000/admin/; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; } } Now our NGINX server will be able to redirect our http calls to our application. As a last step, restart the NGINX server: sudo systemctl restart nginx Or just a 'soft' reset: sudo systemctl reload nginx Appendix \u00b6 Invoking the libraries: \u00b6 To ensure everything gets picked up correctly you can execute the following command lines: export PATH = $PATH :/usr/pgsql-11/bin: $PATH alias python3 = \"/usr/local/bin/python3.9\" In addition, poetry might require this extra step: export PATH = \"/root/.local/bin: $PATH \"","title":"Deployment of EPIC-api"},{"location":"guides/api_deployment/#deployment-of-epic-api","text":"To deploy the backend in an open environment we recommend following Django guidelines by using gunicorn and NGINX . The following requirements should be met from EPIC-api v.1.*: UNIX system. NGINX . Already installed and configured. PostgreSQL . At least version 10, we will install 11. Python 3 . At least version 3.8 Are you deploying on a CentOs machine? You can follow the CentOs installation steps for Python in the appendix section .","title":"Deployment of EPIC-api"},{"location":"guides/api_deployment/#checking-requirements","text":"It could be possible that your UNIX system does not have the latest Python and/or PostgreSQL versions. Please ensure you have installed Python (at least) 3.8 and PostgreSQL 11. postgres --version python3 --version Sometimes they are not found through your bash as they might not be parth of the $PATH. To do so, run the following command. export LD_LIBRARY_PATH = \"/usr/local/lib/\" PATH = $PATH :/usr/local/bin export PATH = $PATH :/usr/pgsql-11/bin: $PATH alias python3 = \"/usr/local/bin/python3.9\"","title":"Checking requirements"},{"location":"guides/api_deployment/#setting-up-postgresql","text":"Assuming you have already installed PostgreSQL, you will need to create a database, user and password to connect the epic_api to. We have described these steps already at the Installing PostgreSQL . After those steps are complete, we need to specify our values for the NAME , USER and PASSWORD with the ones assigned during the postgresql. Let's have a look at epic_core/settings.py which is read by Django to stablish the PostgreSQL database connection. cat /var/www/epic_core/settings.py DATABASES = { \"default\": { \"ENGINE\": \"django.db.backends.postgresql_psycopg2\", \"OPTIONS\": { \"service\": \"epic_svc\", }, } } As can be seen, Django expects a defined service named epic_svc . It will be specified as follows in an ini-file named .pg_service.conf which will be located at our own convenience in the project directory and lated exported as an environment variable . ```cli bash cd /var/www/epic-api vi .pg_service.conf > __IMPORTANT!__ We encountered problems with the .conf file encoding. Please ensure the file is saved with `UTF-8` encoding. > This file has a ini structure as defined in the [official documentation](https://www.postgresql.org/docs/current/libpq-pgservice.html) ```ini [epic_svc] host=localhost user=postgres password=postgres dbname=epic_db port=5432 And we export its location: export PGSERVICEFILE = /var/www/EPIC-api/.pg_service.conf We should now be able to stablish a connection between the Django and the PostgreSQL server. This step can be verified after installing Django by running the command poetry run python manage.py check --database default","title":"Setting up PostgreSQL"},{"location":"guides/api_deployment/#alternative","text":"You may also create the .pg_service.conf at the expected 'global' location: pg_config --sysconfdir > /etc/somepath/to/pgsql vi /etc/somepath/to/pgsql/.pg_service.conf","title":"Alternative"},{"location":"guides/api_deployment/#installing-django","text":"Checkout the root directory of the EPIC-api repository somewhere recognizable. Such as /var/www/epicapi-site/ . Navigate with the commandline to the previous checkout directory. Define debug and secret key values: Create a secret key through Python CLI python >> import secrets >> from pathlib import Path >> Path ( '.django_secrets' ) .write_text ( secrets.token_hex ( 16 )) > A new file is now generated containing your unique token key expected by /epic_core/settings.py. In case this key is not valid please contact carles.sorianoperez@deltares.nl to provide a valid one. Define a debug value: For development: python >> from pathlib import Path >> Path ( '.django_debug' ) .write_text ( \"True\" ) For production: python >> from pathlib import Path >> Path ( '.django_debug' ) .write_text ( \"False\" ) Install now the current Django package. poetry install poetry run python3 manage.py collectstatic --noinput Alternative with latest pip versions: pip install -e . python3 manage.py collectstatic --noinput > It will install the .toml package in edit mode. Run our custom command ONLY WITH A FRESH FIRST CHECKOUT to create the database and add an admin user: For development: poetry python manage.py epic_setup --test > This will import all initial data and generate a test admin user (admin-admin) and several test 'EpicUsers'. For production: poetry python manage.py epic_setup > This will import all initial data but WILL NOT generate a default admin user, you will have to create it yourself. poetry run python manage.py createsuperuser If desired you can change the password after creating the user by running: poetry run python manage.py changepassword <admin username> The tool is now ready to run. In our case we will do it with Gunicorn on the next section.","title":"Installing Django"},{"location":"guides/api_deployment/#gunicorn-run","text":"If we have not executed the custom script, then we need to run on a separate process gunicorn, we only need to execute the following command line as a background activity: poetry run gunicorn epic_core.wsgi > An output in the command line will show you where the (local) server is deployed. By default you should be able to check its functioning here: http://127.0.0.1:8000/","title":"Gunicorn run:"},{"location":"guides/api_deployment/#nginx-configuration","text":"Although we are already 'serving' our Django applicaiton, this does not mean that it is accessible outside our local machine. Most likely you will require to do a redirection of the requests to the backend. For that it's necessary adding the following lines into your 'nginx' .conf file: server { ... location ^~ /api/ { proxy_pass http://127.0.0.1:8000/api/; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; } location ^~ /admin/ { proxy_pass http://127.0.0.1:8000/admin/; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; } } Now our NGINX server will be able to redirect our http calls to our application. As a last step, restart the NGINX server: sudo systemctl restart nginx Or just a 'soft' reset: sudo systemctl reload nginx","title":"NGINX configuration:"},{"location":"guides/api_deployment/#appendix","text":"","title":"Appendix"},{"location":"guides/api_deployment/#invoking-the-libraries","text":"To ensure everything gets picked up correctly you can execute the following command lines: export PATH = $PATH :/usr/pgsql-11/bin: $PATH alias python3 = \"/usr/local/bin/python3.9\" In addition, poetry might require this extra step: export PATH = \"/root/.local/bin: $PATH \"","title":"Invoking the libraries:"},{"location":"guides/contributing/","text":"If you wish to contribute to this project you may want to get familiar with our tooling. We strongly advise to get familiar with the following tools: poetry for package handler. black for code styling. isort for code styling. commitizen for version control. pytest for ensuring continuous integration of the tool. Getting your development environment ready. \u00b6 Using pip \u00b6 Using pip in its latest version allows us to install the .toml file in edit mode. Keep in mind you will have to be running with python 3.8 (at least). cd /epic-api pip install -e . Using poetry \u00b6 cd /epic-api pip install poetry poetry install poetry run Using conda \u00b6 Regardless of installing through pip or poetry, we will still need to create our custom conda environment: cd /epic-api conda create --name epicapi_env python = 3 .8 conda activate epicapi_env * With pip pip install -e . With poetry: poetry install poetry run > Important: it turns out if you work with conda as a python environment you may come against a compatibility problem with virtualenv, we therefore recommend downgrading the pre-installed package of virtualenv of poetry to 20.0.3. conda install poetry conda install virtualenv == 20 .0.33 poetry install poetry run You should have now all the dependencies, including django and djangorestframework as they are defined in the pyproject.toml file, installed in our environment. Some development rules. \u00b6 Branches \u00b6 Each new feature, fix, documentation, pipeline, depencencies, etc, that need to be updated will be done in their own branch. We try to follow the conventional commits , as a general rule, we work with the following branch naming: master : Protected, further reading in section \" Merging into master \". develop : Can be created if not present in order to 'cluster' commits related to a specific version. feat/feature_descriptive_name : When working on a new feature. chore/chore_description : When doing some chores in the project such as clean-up of unnecessary files, minor refactorings and so on. docs/documentation_description : When adding or modifying documentation in the repository. fix/name_of_the_fix : When trying to fix a specific issue / bug in the project. ci/name_of_the_task : When working on anything related to the project dependencies (poetry / .toml) or the pipelines (.github/workflows). Commiting \u00b6 A pre-commit hook is present in this repository and the package should have been installed from the .toml file. In this repository we try to follow the conventional commits convention. Which is further enforced by the usage of commitizen . Commitizen version control \u00b6 When doing a pull-request we encourage to run the cz bump --changelog command which will potentially update the tool version number as well as the changelog file. If this happens, you should also push the new git tags with git push --tags . Testing \u00b6 Testing is fulfilled with the usage of pytest . Most of the tests are located in epic_app/tests directory. Said test directory 'mirrors' the epic_core structure. So whenever a new file is introduced a new test file should be created. Example given: /epic-api |- /epic-core | |- /tests | | |- __init__.py | | |- /models | | | |- __init__.py | | | |- test_new_model.py | |- /models | | |- __init__.py | | |- new_model.py As a general rule of thumb, if code is created or modified, the test bench should be updated with unit tests to cover that new / modified piece of code. When a new workflow is introduced, e.g. routes, it is highly encourage to create a system test that will evaluate the final expected values. For more information on how to achieve this please contact the project administrator. Merging into master \u00b6 Merging into master needs to be done through a pull-request. Please ensure the following steps are fulfilled: Tests are updated and/or extended. The code is correctly formatted. Documentation is added. Docstrings for code, using the google docs format. Type hinting in all methods (in and out). Markdown files in /docs when workflows or project / architectural changes have been introducing. Commitizen has been run to check for version bumping. GitHub Pipelines succeed. Updating EpicTool models. \u00b6 During development it is natural to create new tables or define new columns on a database entry. The most important is to manage the Django migrations with the following steps: python manage.py makemigrations python manage.py migrate The new migrations should be included in the version control as the production server (as well as other contributors) will require them in order to preserve their existing database data. Also, keep in mind that if a new entity needs to be modified through the Django Admin page it will also have to be added into the admin.py page. Licensing \u00b6 At the moment of writing of this document we have an MIT license. It is not intended to include packages or tools which require a more restrictive license or a payment in any form.","title":"Contributing"},{"location":"guides/contributing/#getting-your-development-environment-ready","text":"","title":"Getting your development environment ready."},{"location":"guides/contributing/#using-pip","text":"Using pip in its latest version allows us to install the .toml file in edit mode. Keep in mind you will have to be running with python 3.8 (at least). cd /epic-api pip install -e .","title":"Using pip"},{"location":"guides/contributing/#using-poetry","text":"cd /epic-api pip install poetry poetry install poetry run","title":"Using poetry"},{"location":"guides/contributing/#using-conda","text":"Regardless of installing through pip or poetry, we will still need to create our custom conda environment: cd /epic-api conda create --name epicapi_env python = 3 .8 conda activate epicapi_env * With pip pip install -e . With poetry: poetry install poetry run > Important: it turns out if you work with conda as a python environment you may come against a compatibility problem with virtualenv, we therefore recommend downgrading the pre-installed package of virtualenv of poetry to 20.0.3. conda install poetry conda install virtualenv == 20 .0.33 poetry install poetry run You should have now all the dependencies, including django and djangorestframework as they are defined in the pyproject.toml file, installed in our environment.","title":"Using conda"},{"location":"guides/contributing/#some-development-rules","text":"","title":"Some development rules."},{"location":"guides/contributing/#branches","text":"Each new feature, fix, documentation, pipeline, depencencies, etc, that need to be updated will be done in their own branch. We try to follow the conventional commits , as a general rule, we work with the following branch naming: master : Protected, further reading in section \" Merging into master \". develop : Can be created if not present in order to 'cluster' commits related to a specific version. feat/feature_descriptive_name : When working on a new feature. chore/chore_description : When doing some chores in the project such as clean-up of unnecessary files, minor refactorings and so on. docs/documentation_description : When adding or modifying documentation in the repository. fix/name_of_the_fix : When trying to fix a specific issue / bug in the project. ci/name_of_the_task : When working on anything related to the project dependencies (poetry / .toml) or the pipelines (.github/workflows).","title":"Branches"},{"location":"guides/contributing/#commiting","text":"A pre-commit hook is present in this repository and the package should have been installed from the .toml file. In this repository we try to follow the conventional commits convention. Which is further enforced by the usage of commitizen .","title":"Commiting"},{"location":"guides/contributing/#commitizen-version-control","text":"When doing a pull-request we encourage to run the cz bump --changelog command which will potentially update the tool version number as well as the changelog file. If this happens, you should also push the new git tags with git push --tags .","title":"Commitizen version control"},{"location":"guides/contributing/#testing","text":"Testing is fulfilled with the usage of pytest . Most of the tests are located in epic_app/tests directory. Said test directory 'mirrors' the epic_core structure. So whenever a new file is introduced a new test file should be created. Example given: /epic-api |- /epic-core | |- /tests | | |- __init__.py | | |- /models | | | |- __init__.py | | | |- test_new_model.py | |- /models | | |- __init__.py | | |- new_model.py As a general rule of thumb, if code is created or modified, the test bench should be updated with unit tests to cover that new / modified piece of code. When a new workflow is introduced, e.g. routes, it is highly encourage to create a system test that will evaluate the final expected values. For more information on how to achieve this please contact the project administrator.","title":"Testing"},{"location":"guides/contributing/#merging-into-master","text":"Merging into master needs to be done through a pull-request. Please ensure the following steps are fulfilled: Tests are updated and/or extended. The code is correctly formatted. Documentation is added. Docstrings for code, using the google docs format. Type hinting in all methods (in and out). Markdown files in /docs when workflows or project / architectural changes have been introducing. Commitizen has been run to check for version bumping. GitHub Pipelines succeed.","title":"Merging into master"},{"location":"guides/contributing/#updating-epictool-models","text":"During development it is natural to create new tables or define new columns on a database entry. The most important is to manage the Django migrations with the following steps: python manage.py makemigrations python manage.py migrate The new migrations should be included in the version control as the production server (as well as other contributors) will require them in order to preserve their existing database data. Also, keep in mind that if a new entity needs to be modified through the Django Admin page it will also have to be added into the admin.py page.","title":"Updating EpicTool models."},{"location":"guides/contributing/#licensing","text":"At the moment of writing of this document we have an MIT license. It is not intended to include packages or tools which require a more restrictive license or a payment in any form.","title":"Licensing"},{"location":"guides/install_on_centos/","text":"Install on CentOS 7 \u00b6 In this section you will find the steps to follow in order to install the latest Python and PostgreSQL versions in a CentOs machine. These steps are a summarized walk-through from the references listed in the references section . Preparation \u00b6 In order to ensure the installation happens correctly it is better to first download, compile and install the required packages, this way we guarantee the follow-up installation of Python will pick up said latest version. Do a system update: sudo yum -y install epel-release sudo yum -y update Reboot server: sudo reboot Install required packages (needed for Python): sudo yum -y install wget sudo yum groupinstall \"Development Tools\" -y Installing PostgreSQL \u00b6 Supported from versions EPPIC-api v.1.* We will install PostgreSQL directly from CentOS repositories. To do so follow these steps once you are logged in your server. * Install PostgreSQL: sudo yum install postgresql11-server Initialize the Database sudo /usr/pgsql-11/bin/postgresql-11-setup initdb Start the database sudo systemctl start postgresql-11 sudo systemctl enable postgresql-11 Installation is complete, however we are still not ready to use the database server. We can now proceed with its configuration. PostgreSQL setup \u00b6 Now we need to create the (empty) database to be used by the API, as well as to set a user and a password to access to it. Keep in mind a default user postgres has been added to our linux system. For this guide we will be using the following settings: User: postgres Password: postgres Database: epic_db * Set a password for our 'postgres' user. sudo -u postgres psql \\p assword * Create the database for the EPIC api. We will be using the name 'epic_db' across this guide. sudo -u postgres createdb epic_db We can now connect to epic_db with user postgres . Keep in mind you will need to specify this in the epic_core/settings.py file. Note : We have found out some issues with the pga_hba.conf file when connecting with the database. A working solution is to modify the file fron ident to md5 . We fixed this based on the following reference . Installing Python 3.9 \u00b6 Install required specific packages: sudo yum install openssl-devel libffi-devel bzip2-devel -y Download source code: cd /opt mkdir python39 && cd python39 wget https://www.python.org/ftp/python/3.9.10/Python-3.9.10.tgz tar xvf Python-3.9.10.tgz cd Python-3.9.10 Build and install: ./configure --enable-optimizations sudo make altinstall Verify installation: python3 --version Python 3.9.10 If the latest step does not return at least that value you may need to recompile and install python ensuring the libraries are correctly exported as described in previous steps. Installing Poetry: \u00b6 Install package under latest python3 library: curl -sSL https://install.python-poetry.org | python3 - export PATH = \"/root/.local/bin: $PATH \" Verify installation: poetry --version Poetry version 1.1.13 Appendix \u00b6 Invoking the libraries: \u00b6 To ensure everything gets picked up correctly you can execute the following command lines: export LD_LIBRARY_PATH = \"/usr/local/lib/\" PATH = $PATH :/usr/local/bin export PATH = $PATH :/usr/pgsql-11/bin: $PATH alias python3 = \"/usr/local/bin/python3.9\" In addition, poetry might require this extra step: export PATH = \"/root/.local/bin: $PATH \" References: \u00b6 PostgreSQL: Installing PostgreSQL 11 on CentOs Python 3.9: Installing latest Python on CentOs It is also possible replacing the previous python3 version, moving the python 3.6 to a backup directory (python3.6.bak), this way the alias gets picked up always. (Extra) Poetry official installer","title":"Install on CentOS 7"},{"location":"guides/install_on_centos/#install-on-centos-7","text":"In this section you will find the steps to follow in order to install the latest Python and PostgreSQL versions in a CentOs machine. These steps are a summarized walk-through from the references listed in the references section .","title":"Install on CentOS 7"},{"location":"guides/install_on_centos/#preparation","text":"In order to ensure the installation happens correctly it is better to first download, compile and install the required packages, this way we guarantee the follow-up installation of Python will pick up said latest version. Do a system update: sudo yum -y install epel-release sudo yum -y update Reboot server: sudo reboot Install required packages (needed for Python): sudo yum -y install wget sudo yum groupinstall \"Development Tools\" -y","title":"Preparation"},{"location":"guides/install_on_centos/#installing-postgresql","text":"Supported from versions EPPIC-api v.1.* We will install PostgreSQL directly from CentOS repositories. To do so follow these steps once you are logged in your server. * Install PostgreSQL: sudo yum install postgresql11-server Initialize the Database sudo /usr/pgsql-11/bin/postgresql-11-setup initdb Start the database sudo systemctl start postgresql-11 sudo systemctl enable postgresql-11 Installation is complete, however we are still not ready to use the database server. We can now proceed with its configuration.","title":"Installing PostgreSQL"},{"location":"guides/install_on_centos/#postgresql-setup","text":"Now we need to create the (empty) database to be used by the API, as well as to set a user and a password to access to it. Keep in mind a default user postgres has been added to our linux system. For this guide we will be using the following settings: User: postgres Password: postgres Database: epic_db * Set a password for our 'postgres' user. sudo -u postgres psql \\p assword * Create the database for the EPIC api. We will be using the name 'epic_db' across this guide. sudo -u postgres createdb epic_db We can now connect to epic_db with user postgres . Keep in mind you will need to specify this in the epic_core/settings.py file. Note : We have found out some issues with the pga_hba.conf file when connecting with the database. A working solution is to modify the file fron ident to md5 . We fixed this based on the following reference .","title":"PostgreSQL setup"},{"location":"guides/install_on_centos/#installing-python-39","text":"Install required specific packages: sudo yum install openssl-devel libffi-devel bzip2-devel -y Download source code: cd /opt mkdir python39 && cd python39 wget https://www.python.org/ftp/python/3.9.10/Python-3.9.10.tgz tar xvf Python-3.9.10.tgz cd Python-3.9.10 Build and install: ./configure --enable-optimizations sudo make altinstall Verify installation: python3 --version Python 3.9.10 If the latest step does not return at least that value you may need to recompile and install python ensuring the libraries are correctly exported as described in previous steps.","title":"Installing Python 3.9"},{"location":"guides/install_on_centos/#installing-poetry","text":"Install package under latest python3 library: curl -sSL https://install.python-poetry.org | python3 - export PATH = \"/root/.local/bin: $PATH \" Verify installation: poetry --version Poetry version 1.1.13","title":"Installing Poetry:"},{"location":"guides/install_on_centos/#appendix","text":"","title":"Appendix"},{"location":"guides/install_on_centos/#invoking-the-libraries","text":"To ensure everything gets picked up correctly you can execute the following command lines: export LD_LIBRARY_PATH = \"/usr/local/lib/\" PATH = $PATH :/usr/local/bin export PATH = $PATH :/usr/pgsql-11/bin: $PATH alias python3 = \"/usr/local/bin/python3.9\" In addition, poetry might require this extra step: export PATH = \"/root/.local/bin: $PATH \"","title":"Invoking the libraries:"},{"location":"guides/install_on_centos/#references","text":"PostgreSQL: Installing PostgreSQL 11 on CentOs Python 3.9: Installing latest Python on CentOs It is also possible replacing the previous python3 version, moving the python 3.6 to a backup directory (python3.6.bak), this way the alias gets picked up always. (Extra) Poetry official installer","title":"References:"}]}